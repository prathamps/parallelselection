---
import Header from "../../components/Header/Header.astro"
import Layout from "../../layouts/Layout.astro"
import BlogPostSection from "../../components/BlogPostSection/BlogPostSection.astro"
import lineIMG from "/profileline.svg"
import "../../styles/components/BlogPage.css"

import { getCollection, CollectionEntry } from "astro:content"

import { monthArr } from "../../API/monthApi"

export async function getStaticPaths() {
	const posts = await getCollection("blog")
	return posts.map((post) => {
		return {
			params: { slug: post.slug },
			props: { post },
		}
	})
}

interface Props {
	post: CollectionEntry<"blog">
}

const { post } = Astro.props
const { Content } = await post.render()
---

<Layout>
	<Header />
	<div class="blogContainer">
		<div class="blogPageContainer">
			<div class="blogHeaderContainer">
				<div class="parallelImageConatiner">
					<img src={lineIMG} />
				</div>
				<div class="blogProfileContainer">
					<div class="blogProfileHeader">
						Parallel {post.data.category} Solution
					</div>
					<div class="blogProfileMisc">
						<div class="date">
							{
								`${
									monthArr[post.data.date.getMonth()]
								}  ${post.data.date.getDate()}`
							}
						</div><div class="readTime">
							{post.data.readtime}
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>

	<!-- Blog Content Start -->
	<div class="blogContainer">
		<div class="blog">
			<header>
				<h1 class="blogHeader">{post.data.title}</h1>
				<p class="blogDescription">{post.data.share.description}</p>
			</header>
			<Content />
		</div>
	</div>
	<!-- Blog Content End -->

	<div class="blogTagContainer">
		<div class="tagContainer">
			{post.data.tags.map((tag: any) => <div class="chips">{tag}</div>)}
		</div>
	</div>
	<div class="subscribeContainer">
		<div class="emailContainer">
			<div class="subscribeHeader">Get an email there is new publish.</div>
			<div class="subscribeInputContainer">
				<div class="emailBar">
					<input
						type="email"
						class="emailInput"
						placeholder="Your Email"
						id="emailInput"
					/>
				</div>
				<button class="subscribeButton" id="subscribe">Subscribe</button>
			</div>
		</div>
	</div>
	<script>
		import { addDoc, collection } from "firebase/firestore"

		import { db } from "../../firebase"

		let emailInput = document.getElementById("emailInput") as HTMLInputElement
		let subscribeBtn = document.getElementById("subscribe") as HTMLButtonElement
		let email = ""
		let loader = false
		const validateEmail = (mail: string) => {
			return String(mail)
				.toLowerCase()
				.match(
					/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|.(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
				)
		}

		const disableSendButton = () => {
			subscribeBtn.disabled = true
			subscribeBtn.classList.add("send-disabled")
		}

		const enableSendButton = () => {
			subscribeBtn.disabled = false
			subscribeBtn.classList.remove("send-disabled")
		}

		const handleSubmit = async () => {
			loader = true
			const currentDate = new Date().toLocaleString()
			// Add a new document with a generated id.
			console.log({
				date: currentDate,
				email: email,
			})

			try {
				const docRef = await addDoc(collection(db, "email"), {
					date: currentDate || null,
					email: email || null,
				})
				console.log("Document written with ID: ", docRef.id)
				loader = false
			} catch (err) {
				console.log(err)
				loader = false
			}

			// Added null check for sendButton
			disableSendButton()
			const cooldownExpiration = new Date().getTime() + 2 * 60 * 1000

			// Set a timer to re-enable the button when the cooldown expires
			setTimeout(() => {
				// Re-enable the button
				subscribeBtn.disabled = false
				// Remove the cooldown expiration time from the Realtime Database
			}, 2 * 60 * 1000)
		}

		subscribeBtn?.addEventListener("click", () => {
			email = emailInput.value.trim()
			console.log(email.length)
			if (validateEmail(email)) {
				handleSubmit()
			} else {
				console.log("Make sure to enter a valid email")
			}
		})
	</script>
	<BlogPostSection />
</Layout>
