---
import Header from "../components/Header/Header.astro"
import Layout from "../layouts/Layout.astro"

import "../styles/components/AskSelection.css"

import { db } from "../firebase"
---

<Layout>
	<a href="/" class="backButtonContainer"
		>{`<-`}

		Back</a
	>
	<div class="formContainer">
		<div class="askSelectionContainer">
			<div class="formHeading">Ask a Selection</div>
			<textarea
				class="textarea"
				spellcheck="false"
				placeholder="Type something here..."
				id="questionarea"
				required></textarea>

			<div class="buttonContainer">
				<button class="formButton" id="sendQuestionBtn">Send</button>
			</div>
			<div class="statusText" id="status">
				Send me selections that you would like to see
			</div>
		</div>
	</div>

	<script>
		import {
			addDoc,
			collection,
			deleteDoc,
			doc,
			getDoc,
			getDocs,
		} from "firebase/firestore"
		import { db } from "../firebase"

		let textarea = document.getElementById(
			"questionarea"
		) as HTMLTextAreaElement
		let sendButton = document.getElementById(
			"sendQuestionBtn"
		) as HTMLButtonElement
		let questiontext = ""
		let loader = false
		let statusDiv = document.getElementById("status") as HTMLDivElement

		const disableSendButton = () => {
			sendButton.disabled = true
			sendButton.classList.add("send-disabled")
		}

		const enableSendButton = () => {
			sendButton.disabled = false
			sendButton.classList.remove("send-disabled")
			statusDiv.innerText = "Send me your preferred selections"
		}

		disableSendButton()

		const deleteCoolDown = async () => {
			const coolDownRefs = collection(db, "coolDown")
			const coolDownSnapshot = await getDocs(coolDownRefs)
			try {
				coolDownSnapshot.forEach(async (d) => {
					await deleteDoc(doc(db, "coolDown", d.id.toString()))
				})
			} catch (error) {
				// Added catch parameter
				console.error("An error occurred when deleting expiration:", error)
			}
		}

		const setStatusText = (cooldownExpiration: number) => {
			statusDiv.innerText =
				"Please wait " +
				Math.ceil((cooldownExpiration - new Date().getTime()) / 60000) +
				" minute before you can ask a question"
		}
		// Check Firestore for a cooldown expiration time on page load
		const checkCoolDown = async () => {
			const coolDownRefs = collection(db, "coolDown")
			const coolDownSnapshot = await getDocs(coolDownRefs)

			if (coolDownSnapshot.empty) {
				console.error("The 'coolDown' collection is empty.")
				enableSendButton()
			} else {
				console.error("Documents in the 'coolDown' collection:")
				coolDownSnapshot.forEach((doc) => {
					let cooldownExpiration = doc.data().expiration

					if (cooldownExpiration && cooldownExpiration > new Date().getTime()) {
						// A cooldown is still active, so disable the button
						setStatusText(cooldownExpiration)
						disableSendButton()
						// Set a timer to re-enable the button when the cooldown expires
						setTimeout(() => {
							// Re-enable the button
							enableSendButton()
							// Remove the cooldown expiration time from Firestore
							deleteCoolDown()

							statusDiv.innerText = (
								cooldownExpiration - new Date().getTime()
							).toLocaleString()
						}, cooldownExpiration - new Date().getTime())
					}
				})
			}
		}

		checkCoolDown()
		const handleSubmit = async () => {
			loader = true
			const currentDate = new Date().toLocaleString()

			try {
				const docRef = await addDoc(collection(db, "selectquestion"), {
					date: currentDate || null,
					question: questiontext || null,
				})
				console.log("Document written with ID: ", docRef.id)
				loader = false
			} catch (err) {
				console.error("Encounter and error", err)
				loader = false
			}

			// Added null check for sendButton
			disableSendButton()
			const cooldownExpiration = new Date().getTime() + 2 * 60 * 1000

			try {
				await addDoc(collection(db, "coolDown"), {
					expiration: cooldownExpiration,
				})
			} catch (error) {
				// Added catch parameter
				console.error("An Error was encountered:", error)
			}
			setStatusText(cooldownExpiration)
			// Set a timer to re-enable the button when the cooldown expires
			setTimeout(() => {
				// Re-enable the button
				sendButton.disabled = false
				// Remove the cooldown expiration time from the Realtime Database
				deleteCoolDown()

				setStatusText(cooldownExpiration)
			}, 2 * 60 * 1000)
		}

		sendButton?.addEventListener("click", () => {
			questiontext = textarea.value.trim()

			if (questiontext.length > 2 && questiontext.length < 250) {
				disableSendButton()
				handleSubmit()
			} else {
				statusDiv.innerText = "Make sure the text lies between [2, 250] letters"
			}
		})
	</script>
</Layout>
